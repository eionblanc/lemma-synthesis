do not print !
; comment


(declare-const b1 Bool)
(declare-const b2 Bool)
(declare-const b3 Bool)
(declare-const b4 Bool)
(declare-const b5 Bool)
(declare-const b6 Bool)

(define-fun Loc1 ((x Int) (y Int)) Int
(ite b1 x y)
)
(define-fun Loc2 ((x Int) (y Int)) Int
(ite b2 x y)
)
(define-fun Loc3 ((x Int) (y Int)) Int
(ite b3 x y)
)
(define-fun Loc4 ((x Int) (y Int)) Int
(ite b4 x y)
)
(define-fun Loc5 ((x Int) (y Int)) Int
(ite b5 x y)
)
(define-fun Loc6 ((x Int) (y Int)) Int
(ite b6 x y)
)

(define-fun lemma ((x Int) (y Int)) Bool
(=> (member (Loc1 x y) (hbst (Loc2 x y)))
    (and (<= (key (Loc3 x y))
             (maxr (Loc4 x y)))
         (<= (minr (Loc5 x y))
             (key (Loc6 x y)))))
)

( testing )
this should not appear
; neither should this


(declare-const b7 Bool)
(declare-const b8 Bool)
(declare-const b9 Bool)
(declare-const b10 Bool)
(declare-const b11 Bool)
(declare-const b12 Bool)
(declare-const b13 Bool)
(declare-const b14 Bool)
(declare-const b15 Bool)
(declare-const b16 Bool)
(declare-const b17 Bool)
(declare-const b18 Bool)
(declare-const b19 Bool)
(declare-const b20 Bool)
(declare-const b21 Bool)
(declare-const b22 Bool)
(declare-const b23 Bool)
(declare-const b24 Bool)
(declare-const b25 Bool)
(declare-const b26 Bool)
(declare-const b27 Bool)
(declare-const b28 Bool)
(declare-const b29 Bool)
(declare-const b30 Bool)
(declare-const b31 Bool)
(declare-const b32 Bool)
(declare-const b33 Bool)
(declare-const b34 Bool)
(declare-const b35 Bool)
(declare-const b36 Bool)
(declare-const b37 Bool)
(declare-const b38 Bool)
(declare-const b39 Bool)
(declare-const b40 Bool)
(declare-const b41 Bool)
(declare-const b42 Bool)
(declare-const b43 Bool)
(declare-const b44 Bool)
(declare-const b45 Bool)
(declare-const b46 Bool)
(declare-const b47 Bool)

(define-fun Loc7 ((x Int) (y Int)) Int
(ite b18 x (ite b19 y (ite b20 (lft x) (rght x))))
)
(define-fun Loc8 ((x Int) (y Int)) Int
(ite b21 x (ite b22 y (ite b23 (lft x) (rght x))))
)
(define-fun Loc9 ((x Int) (y Int)) Int
(ite b24 x (ite b25 y (ite b26 (lft x) (rght x))))
)
(define-fun Loc10 ((x Int) (y Int)) Int
(ite b27 x (ite b28 y (ite b29 (lft x) (rght x))))
)
(define-fun Loc11 ((x Int) (y Int)) Int
(ite b30 x (ite b31 y (ite b32 (lft x) (rght x))))
)
(define-fun Loc12 ((x Int) (y Int)) Int
(ite b33 x (ite b34 y (ite b35 (lft x) (rght x))))
)
(define-fun Loc13 ((x Int) (y Int)) Int
(ite b36 x (ite b37 y (ite b38 (lft x) (rght x))))
)
(define-fun Loc14 ((x Int) (y Int)) Int
(ite b39 x (ite b40 y (ite b41 (lft x) (rght x))))
)
(define-fun Loc15 ((x Int) (y Int)) Int
(ite b42 x (ite b43 y (ite b44 (lft x) (rght x))))
)
(define-fun Loc16 ((x Int) (y Int)) Int
(ite b45 x (ite b46 y (ite b47 (lft x) (rght x))))
)
(define-fun I1 ((x Int) (y Int)) Int
(ite b10 (minr (Loc9 x y)) (ite b11 (maxr (Loc10 x y)) k))
)
(define-fun I2 ((x Int) (y Int)) Int
(ite b12 (minr (Loc11 x y)) (ite b13 (maxr (Loc12 x y)) k))
)
(define-fun I3 ((x Int) (y Int)) Int
(ite b14 (minr (Loc13 x y)) (ite b15 (maxr (Loc14 x y)) k))
)
(define-fun I4 ((x Int) (y Int)) Int
(ite b16 (minr (Loc15 x y)) (ite b17 (maxr (Loc16 x y)) k))
)
(define-fun B1_1 ((x Int) (y Int)) Bool
(ite b8 (<= (I1 x y) (I2 x y)) (bst (Loc7 x y)))
)
(define-fun B1_2 ((x Int) (y Int)) Bool
(ite b9 (<= (I3 x y) (I4 x y)) (bst (Loc8 x y)))
)

(define-fun lemma ((x Int) (y Int)) Bool
(ite b7
     (B1_1 x y)
     (=> (B1_2 x y)
         (= x k)))
)



; third grammar

(declare-const b48 Bool)
(declare-const b49 Bool)
(declare-const b50 Bool)
(declare-const b51 Bool)
(declare-const b52 Bool)
(declare-const b53 Bool)
(declare-const b54 Bool)
(declare-const b55 Bool)
(declare-const b56 Bool)
(declare-const b57 Bool)
(declare-const b58 Bool)
(declare-const b59 Bool)

(define-fun Loc17 ((x Int) (y Int) (z Int)) Int
(ite b48 x (ite b49 (+ (lft z) z) y))
)
(define-fun Loc18 ((x Int) (y Int) (z Int)) Int
(ite b50 x (ite b51 (+ (lft z) z) y))
)
(define-fun Loc19 ((x Int) (y Int) (z Int)) Int
(ite b52 x (ite b53 (+ (lft z) z) y))
)
(define-fun Loc20 ((x Int) (y Int) (z Int)) Int
(ite b54 x (ite b55 (+ (lft z) z) y))
)
(define-fun Loc21 ((x Int) (y Int) (z Int)) Int
(ite b56 x (ite b57 (+ (lft z) z) y))
)
(define-fun Loc22 ((x Int) (y Int) (z Int)) Int
(ite b58 x (ite b59 (+ (lft z) z) y))
)

(define-fun lemma ((x Int) (y Int) (z Int)) Bool
(=> (member (Loc17 x y z) (hbst (Loc18 x y z)))
    (and (<= (* 3 (key (Loc19 x y z)))
             (maxr (Loc20 x y z)))
         (<= (minr (Loc21 x y z))
             (key (Loc22 x y z)))))
)






; (check-sat)