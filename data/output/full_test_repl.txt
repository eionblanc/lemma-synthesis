(set-logic ALL)
;; combination of true models and false model
(define-fun hbst ((x!0 Int)) (Set Int)
  (ite (and (= x!0 1140984)) (insert 1140984 (as emptyset (Set Int)))
  (ite (and (= x!0 1140983)) (as emptyset (Set Int))
  (ite (and (= x!0 1140986)) (as emptyset (Set Int))
  (ite (and (= x!0 1140985)) (insert 1140985 (insert 1141018 (as emptyset (Set Int))))
  (ite (and (= x!0 1140993)) (insert 1141018 (as emptyset (Set Int)))
  (ite (and (= x!0 1140992)) (as emptyset (Set Int))
  (ite (and (= x!0 1169087)) (insert 1169087 (as emptyset (Set Int)))
  (ite (and (= x!0 1176820)) (insert 1176846 (as emptyset (Set Int)))
  (ite (and (= x!0 1176847)) (insert 1176807 (insert 1176846 (insert 1176847 (as emptyset (Set Int)))))
  (ite (and (= x!0 1176819)) (insert 1176807 (as emptyset (Set Int)))
  (ite (and (= x!0 1176808)) (as emptyset (Set Int))
  (ite (and (= x!0 1176807)) (insert 1169088 (insert 1176849 (insert 1176807 (as emptyset (Set Int)))))
  (ite (and (= x!0 1176824)) (insert 1176849 (as emptyset (Set Int)))
  (ite (and (= x!0 1169088)) (insert 1169088 (insert 1176849 (as emptyset (Set Int))))
  (ite (and (= x!0 1176825)) (as emptyset (Set Int))
  (ite (and (= x!0 1176856)) (insert 1176873 (as emptyset (Set Int)))
  (ite (and (= x!0 1176851)) (insert 1176873 (insert 1176850 (insert 1176851 (as emptyset (Set Int)))))
  (ite (and (= x!0 1176850)) (as emptyset (Set Int))
  (ite (and (= x!0 1176855)) (insert 1176850 (as emptyset (Set Int)))
  (ite (and (= x!0 1184593)) (insert 1184593 (insert 1176918 (as emptyset (Set Int))))
  (ite (and (= x!0 1176874)) (as emptyset (Set Int))
  (ite (and (= x!0 1176888)) (insert 1184595 (as emptyset (Set Int)))
  (ite (and (= x!0 1176889)) (insert 1176913 (as emptyset (Set Int)))
  (ite (and (= x!0 1176893)) (insert 1176918 (as emptyset (Set Int)))
  (ite (and (= x!0 1184595)) (insert 1184593 (insert 1184595 (insert 1176918 (as emptyset (Set Int)))))
  (ite (and (= x!0 1184594)) (insert 1176913 (insert 1184594 (insert 1184595 (as emptyset (Set Int)))))
  (ite (and (= x!0 1176894)) (as emptyset (Set Int))
  (ite (and (= x!0 1184604)) (as emptyset (Set Int))
  (ite (and (= x!0 1184597)) (insert 1184619 (insert 1184596 (insert 1184597 (as emptyset (Set Int)))))
  (ite (and (= x!0 1184596)) (as emptyset (Set Int))
  (ite (and (= x!0 1184605)) (insert 1184619 (insert 1184596 (as emptyset (Set Int))))
  (ite (and (= x!0 1140967)) (insert 1140976 (insert 1140979 (insert 1140980 (insert 1140967 (insert 1140969 (insert 174 (insert 1140958 (insert 1140975 (as emptyset (Set Int))))))))))
  (ite (and (= x!0 1140965)) (insert 1140956 (insert 1140957 (insert 1140958 (insert 1140959 (insert 1140960 (insert 1140963 (insert 1140964 (insert 1140965 (insert 1140966 (insert 1140967 (insert 1140968 (insert 1140969 (insert 1140972 (insert 1140973 (insert 174 (insert 1140975 (insert 1140976 (insert 1140977 (insert 1140978 (insert 1140979 (insert 179 (insert 1140980 (insert 1140982 (as emptyset (Set Int)))))))))))))))))))))))))
  (ite (and (= x!0 1140971)) (insert 1140961 (insert 1140962 (insert 1140970 (insert 171 (insert 1140972 (insert 1140971 (insert 1140974 (insert 1140976 (insert 154 (insert 158 (as emptyset (Set Int))))))))))))
  (ite (and (= x!0 1140972)) (insert 1140962 (insert 158 (insert 171 (insert 1140972 (insert 1140974 (as emptyset (Set Int)))))))
  (ite (and (= x!0 1140968)) (as emptyset (Set Int))
  (ite (and (= x!0 1140957)) (insert 1140960 (insert 1140963 (insert 1140964 (insert 1140966 (insert 1140968 (insert 1140972 (insert 1140973 (insert 1140977 (insert 1140978 (insert 179 (insert 1140982 (insert 1140956 (insert 1140957 (insert 1140959 (as emptyset (Set Int))))))))))))))))
  (ite (and (= x!0 1140964)) (insert 1140977 (insert 179 (insert 1140972 (insert 1140964 (insert 1140968 (insert 1140956 (insert 1140973 (as emptyset (Set Int)))))))))
  (ite (and (= x!0 1140976)) (insert 1140961 (insert 1140962 (insert 1140970 (insert 171 (insert 1140972 (insert 1140971 (insert 1140974 (insert 1140976 (insert 154 (insert 158 (as emptyset (Set Int))))))))))))
  (ite (and (= x!0 1140960)) (insert 1140960 (insert 1140978 (insert 1140963 (insert 1140982 (insert 1140966 (insert 1140959 (as emptyset (Set Int))))))))
  (ite (and (= x!0 1140975)) (insert 1140976 (insert 1140979 (insert 1140980 (insert 1140969 (insert 174 (insert 1140958 (insert 1140975 (as emptyset (Set Int)))))))))
  (as emptyset (Set Int))))))))))))))))))))))))))))))))))))))))))))

(define-fun rght ((x!0 Int)) Int
  (ite (= x!0 1140984) 1140983
  (ite (= x!0 1140983) 1140983
  (ite (= x!0 1140986) 1140986
  (ite (= x!0 1140985) 1140993
  (ite (= x!0 1140993) 1140986
  (ite (= x!0 1140992) 1140986
  (ite (= x!0 1169087) 1140986
  (ite (= x!0 1176820) 1176808
  (ite (= x!0 1176847) 1176820
  (ite (= x!0 1176819) 1176808
  (ite (= x!0 1176808) 1176808
  (ite (= x!0 1176807) 1176808
  (ite (= x!0 1176824) 1176808
  (ite (= x!0 1169088) 1176825
  (ite (= x!0 1176825) 1176808
  (ite (= x!0 1176856) 1176856
  (ite (= x!0 1176851) 1176856
  (ite (= x!0 1176850) 1176850
  (ite (= x!0 1176855) 1176856
  (ite (= x!0 1184593) 1176894
  (ite (= x!0 1176874) 1176874
  (ite (= x!0 1176888) 1176874
  (ite (= x!0 1176889) 1176874
  (ite (= x!0 1176893) 1176874
  (ite (= x!0 1184595) 1176874
  (ite (= x!0 1184594) 1176889
  (ite (= x!0 1176894) 1176874
  (ite (= x!0 1184604) 1184605
  (ite (= x!0 1184597) 1184605
  (ite (= x!0 1184596) 1184596
  (ite (= x!0 1184605) 1184605
  (ite (= x!0 1140967) 1140975
  (ite (= x!0 1140965) 1140967
  (ite (= x!0 1140971) 89
  (ite (= x!0 1140972) 72
  (ite (= x!0 1140968) 1140968
  (ite (= x!0 1140957) 1140964
  (ite (= x!0 1140964) 57
  (ite (= x!0 1140976) 1140971
  (ite (= x!0 1140960) 111
  (ite (= x!0 1140975) 85
    1176808))))))))))))))))))))))))))))))))))))))))))
(define-fun minr ((x!0 Int)) Int
  (ite (= x!0 1140984) 1
  (ite (= x!0 1140983) 100
  (ite (= x!0 1140986) 100
  (ite (= x!0 1140985) (- 2)
  (ite (= x!0 1140993) (- 1)
  (ite (= x!0 1140992) (- 2)
  (ite (= x!0 1169087) 1
  (ite (= x!0 1176820) 0
  (ite (= x!0 1176847) 0
  (ite (= x!0 1176819) 1
  (ite (= x!0 1176808) 100
  (ite (= x!0 1176807) 1
  (ite (= x!0 1176824) 1
  (ite (= x!0 1169088) 1
  (ite (= x!0 1176825) 1
  (ite (= x!0 1176856) (- 1)
  (ite (= x!0 1176851) (- 1)
  (ite (= x!0 1176850) 100
  (ite (= x!0 1176855) 0
  (ite (= x!0 1184593) 1
  (ite (= x!0 1176874) 100
  (ite (= x!0 1176888) 5
  (ite (= x!0 1176889) 4
  (ite (= x!0 1176893) 2
  (ite (= x!0 1184595) 1
  (ite (= x!0 1184594) 4
  (ite (= x!0 1176894) 1
  (ite (= x!0 1184604) 0
  (ite (= x!0 1184597) 0
  (ite (= x!0 1184596) 100
  (ite (= x!0 1184605) 0
  (ite (= x!0 1140967) 4
  (ite (= x!0 1140965) 0
  (ite (= x!0 1140971) 99
  (ite (= x!0 1140972) 98
  (ite (= x!0 1140968) 100
  (ite (= x!0 1140957) 0
  (ite (= x!0 1140964) 3
  (ite (= x!0 1140976) 98
  (ite (= x!0 1140960) 0
  (ite (= x!0 1140975) 98
    1))))))))))))))))))))))))))))))))))))))))))
(define-fun lft ((x!0 Int)) Int
  (ite (= x!0 1140984) 1140983
  (ite (= x!0 1140983) 1140983
  (ite (= x!0 1140986) 1140986
  (ite (= x!0 1140985) 1140992
  (ite (= x!0 1140993) 1140986
  (ite (= x!0 1140992) 1140986
  (ite (= x!0 1169087) 1140986
  (ite (= x!0 1176820) 1169088
  (ite (= x!0 1176847) 1176819
  (ite (= x!0 1176819) 1169088
  (ite (= x!0 1176808) 1176808
  (ite (= x!0 1176807) 1169088
  (ite (= x!0 1176824) 1169088
  (ite (= x!0 1169088) 1176824
  (ite (= x!0 1176825) 1169088
  (ite (= x!0 1176856) 1176855
  (ite (= x!0 1176851) 1176855
  (ite (= x!0 1176850) 1176850
  (ite (= x!0 1176855) 1176855
  (ite (= x!0 1184593) 1176893
  (ite (= x!0 1176874) 1176874
  (ite (= x!0 1176888) 1184593
  (ite (= x!0 1176889) 1184593
  (ite (= x!0 1176893) 1184593
  (ite (= x!0 1184595) 1184593
  (ite (= x!0 1184594) 1176888
  (ite (= x!0 1176894) 1184593
  (ite (= x!0 1184604) 1184604
  (ite (= x!0 1184597) 1184604
  (ite (= x!0 1184596) 1184596
  (ite (= x!0 1184605) 1184604
  (ite (= x!0 1140967) 1140968
  (ite (= x!0 1140965) 1140957
  (ite (= x!0 1140971) 90
  (ite (= x!0 1140972) 70
  (ite (= x!0 1140968) 1140968
  (ite (= x!0 1140957) 1140960
  (ite (= x!0 1140964) 56
  (ite (= x!0 1140976) 1140972
  (ite (= x!0 1140960) 109
  (ite (= x!0 1140975) 84
    1169088))))))))))))))))))))))))))))))))))))))))))
(define-fun key ((x!0 Int)) Int
  (ite (= x!0 1140984) 1
  (ite (= x!0 1140983) 99
  (ite (= x!0 1140986) 1
  (ite (= x!0 1140985) 0
  (ite (= x!0 1140993) 1
  (ite (= x!0 1140992) 1
  (ite (= x!0 1169087) 1
  (ite (= x!0 1176820) 1
  (ite (= x!0 1176847) 3
  (ite (= x!0 1176819) 1
  (ite (= x!0 1176808) 1
  (ite (= x!0 1176807) 2
  (ite (= x!0 1176824) 1
  (ite (= x!0 1169088) 1
  (ite (= x!0 1176825) 1
  (ite (= x!0 1176856) 0
  (ite (= x!0 1176851) 0
  (ite (= x!0 1176850) 0
  (ite (= x!0 1176855) 0
  (ite (= x!0 1184593) 1
  (ite (= x!0 1176874) 4
  (ite (= x!0 1176888) 3
  (ite (= x!0 1176889) 3
  (ite (= x!0 1176893) 3
  (ite (= x!0 1184595) 3
  (ite (= x!0 1184594) 5
  (ite (= x!0 1176894) 3
  (ite (= x!0 1184604) 100
  (ite (= x!0 1184597) 100
  (ite (= x!0 1184596) 102
  (ite (= x!0 1184605) 100
  (ite (= x!0 1140967) 4
  (ite (= x!0 1140965) 4
  (ite (= x!0 1140971) 100
  (ite (= x!0 1140972) 98
  (ite (= x!0 1140968) 101
  (ite (= x!0 1140957) 3
  (ite (= x!0 1140964) 3
  (ite (= x!0 1140976) 99
  (ite (= x!0 1140960) 2
  (ite (= x!0 1140975) 98
    1))))))))))))))))))))))))))))))))))))))))))
(define-fun maxr ((x!0 Int)) Int
  (ite (= x!0 1140984) 1
  (ite (= x!0 1140983) (- 1)
  (ite (= x!0 1140986) (- 1)
  (ite (= x!0 1140985) 0
  (ite (= x!0 1140993) 0
  (ite (= x!0 1140992) 0
  (ite (= x!0 1169087) 1
  (ite (= x!0 1176820) 3
  (ite (= x!0 1176847) 3
  (ite (= x!0 1176819) 3
  (ite (= x!0 1176808) (- 1)
  (ite (= x!0 1176807) 2
  (ite (= x!0 1176824) 0
  (ite (= x!0 1169088) 1
  (ite (= x!0 1176825) 0
  (ite (= x!0 1176856) 0
  (ite (= x!0 1176851) 0
  (ite (= x!0 1176850) (- 1)
  (ite (= x!0 1176855) 0
  (ite (= x!0 1184593) 2
  (ite (= x!0 1176874) (- 1)
  (ite (= x!0 1176888) 6
  (ite (= x!0 1176889) 6
  (ite (= x!0 1176893) 0
  (ite (= x!0 1184595) 3
  (ite (= x!0 1184594) 6
  (ite (= x!0 1176894) 2
  (ite (= x!0 1184604) 101
  (ite (= x!0 1184597) 101
  (ite (= x!0 1184596) (- 1)
  (ite (= x!0 1184605) 101
  (ite (= x!0 1140967) 102
  (ite (= x!0 1140965) 102
  (ite (= x!0 1140971) 101
  (ite (= x!0 1140972) 100
  (ite (= x!0 1140968) (- 1)
  (ite (= x!0 1140957) 3
  (ite (= x!0 1140964) 3
  (ite (= x!0 1140976) 101
  (ite (= x!0 1140960) 2
  (ite (= x!0 1140975) 102
    0))))))))))))))))))))))))))))))))))))))))))
(define-fun bst ((x!0 Int)) Bool
  (ite (= x!0 1140984) true
  (ite (= x!0 1140983) true
  (ite (= x!0 1140986) true
  (ite (= x!0 1140985) false
  (ite (= x!0 1140993) false
  (ite (= x!0 1140992) false
  (ite (= x!0 1169087) true
  (ite (= x!0 1176820) true
  (ite (= x!0 1176847) false
  (ite (= x!0 1176819) true
  (ite (= x!0 1176808) true
  (ite (= x!0 1176807) true
  (ite (= x!0 1176824) true
  (ite (= x!0 1169088) true
  (ite (= x!0 1176825) true
  (ite (= x!0 1176856) false
  (ite (= x!0 1176851) false
  (ite (= x!0 1176850) true
  (ite (= x!0 1176855) false
  (ite (= x!0 1184593) true
  (ite (= x!0 1176874) true
  (ite (= x!0 1176888) false
  (ite (= x!0 1176889) true
  (ite (= x!0 1176893) true
  (ite (= x!0 1184595) true
  (ite (= x!0 1184594) false
  (ite (= x!0 1176894) true
  (ite (= x!0 1184604) false
  (ite (= x!0 1184597) false
  (ite (= x!0 1184596) true
  (ite (= x!0 1184605) false
  (ite (= x!0 1140967) true
  (ite (= x!0 1140965) true
  (ite (= x!0 1140971) false
  (ite (= x!0 1140972) false
  (ite (= x!0 1140968) true
  (ite (= x!0 1140957) true
  (ite (= x!0 1140964) true
  (ite (= x!0 1140976) false
  (ite (= x!0 1140960) true
  (ite (= x!0 1140975) true
    true))))))))))))))))))))))))))))))))))))))))))

;; lemma to synthesize
;; TODO: must be generated from problem parameters
(declare-const k Int)

(declare-const b1 Bool)
(declare-const b2 Bool)
(declare-const b3 Bool)
(declare-const b4 Bool)
(declare-const b5 Bool)
(declare-const b6 Bool)
(declare-const b7 Bool)
(declare-const b8 Bool)
(declare-const b9 Bool)
(declare-const b10 Bool)
(declare-const b11 Bool)
(declare-const b12 Bool)
(declare-const b13 Bool)
(declare-const b14 Bool)
(declare-const b15 Bool)
(declare-const b16 Bool)
(declare-const b17 Bool)
(declare-const b18 Bool)
(declare-const b19 Bool)
(declare-const b20 Bool)
(declare-const b21 Bool)
(declare-const b22 Bool)
(declare-const b23 Bool)
(declare-const b24 Bool)
(declare-const b25 Bool)
(declare-const b26 Bool)
(declare-const b27 Bool)
(declare-const b28 Bool)
(declare-const b29 Bool)
(declare-const b30 Bool)
(declare-const b31 Bool)

(define-fun Loc1 ((x Int) (y Int)) Int
(ite b8 x (ite b9 y (ite b10 (lft x) (rght x))))
)
(define-fun Loc2 ((x Int) (y Int)) Int
(ite b11 x (ite b12 y (ite b13 (lft x) (rght x))))
)
(define-fun Loc3 ((x Int) (y Int)) Int
(ite b14 x (ite b15 y (ite b16 (lft x) (rght x))))
)
(define-fun Loc4 ((x Int) (y Int)) Int
(ite b17 x (ite b18 y (ite b19 (lft x) (rght x))))
)
(define-fun Loc5 ((x Int) (y Int)) Int
(ite b20 x (ite b21 y (ite b22 (lft x) (rght x))))
)
(define-fun Loc6 ((x Int) (y Int)) Int
(ite b23 x (ite b24 y (ite b25 (lft x) (rght x))))
)
(define-fun Loc7 ((x Int) (y Int)) Int
(ite b26 x (ite b27 y (ite b28 (lft x) (rght x))))
)
(define-fun Loc8 ((x Int) (y Int)) Int
(ite b29 x (ite b30 y (ite b31 (lft x) (rght x))))
)
(define-fun I1 ((x Int) (y Int)) Int
(ite b2 (minr (Loc3 x y)) (ite b3 (maxr (Loc4 x y)) k))
)
(define-fun I2 ((x Int) (y Int)) Int
(ite b4 (minr (Loc5 x y)) (ite b5 (maxr (Loc6 x y)) k))
)
(define-fun I3 ((x Int) (y Int)) Int
(ite b6 (minr (Loc7 x y)) (ite b7 (maxr (Loc8 x y)) k))
)
(define-fun B1_1 ((x Int) (y Int)) Bool
(ite b1 (<= (I2 x y) (I3 x y)) (bst (Loc2 x y)))
)

(define-fun lemma ((x Int) (y Int)) Bool
(=> (B1_1 x y)
    (<= (minr (Loc1 x y))
        (I1 x y)))
)


(declare-const b32 Bool)
(declare-const b33 Bool)
(declare-const b34 Bool)
(declare-const b35 Bool)
(declare-const b36 Bool)
(declare-const b37 Bool)

(define-fun Loc9 ((x Int) (y Int)) Int
(ite b32 x y)
)
(define-fun Loc10 ((x Int) (y Int)) Int
(ite b33 x y)
)
(define-fun Loc11 ((x Int) (y Int)) Int
(ite b34 x y)
)
(define-fun Loc12 ((x Int) (y Int)) Int
(ite b35 x y)
)
(define-fun Loc13 ((x Int) (y Int)) Int
(ite b36 x y)
)
(define-fun Loc14 ((x Int) (y Int)) Int
(ite b37 x y)
)

(define-fun lemma2 ((x Int) (y Int)) Bool
(=> (member (Loc9 x y) (hbst (Loc10 x y)))
    (and (<= (key (Loc11 x y))
             (maxr (Loc12 x y)))
         (<= (minr (Loc13 x y))
             (key (Loc14 x y)))))
)


;(synth-fun rswitch () Int
;           ((Start Int))
;           ((Start Int (0)))
;)

(define-fun rswitch () Int 0)

;Implies(bst(x), Implies(IsMember(y, hbst(x)), And(key(y) <= maxr(x), minr(x) <= key(y))))

;; pfp constraints from counterexample models
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1140984) 0)
                (< (key 1140984) 100)
                (lemma (lft 1140984) 1140983)
                (bst (lft 1140984))
                (lemma (rght 1140984) 1140983)
                (bst (rght 1140984))
                (<= (maxr (lft 1140984)) (key 1140984))
                (<= (key 1140984) (minr (rght 1140984))))))
  (=> (ite (= 1140984 1140983) true a!1) (lemma 1140984 1140983))))))
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1169087) 0)
                (< (key 1169087) 100)
                (lemma (lft 1169087) 1140985)
                (bst (lft 1169087))
                (lemma (rght 1169087) 1140985)
                (bst (rght 1169087))
                (<= (maxr (lft 1169087)) (key 1169087))
                (<= (key 1169087) (minr (rght 1169087))))))
  (=> (ite (= 1169087 1140986) true a!1) (lemma 1169087 1140985))))))
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1176807) 0)
                (< (key 1176807) 100)
                (lemma (lft 1176807) 1176847)
                (bst (lft 1176807))
                (lemma (rght 1176807) 1176847)
                (bst (rght 1176807))
                (<= (maxr (lft 1176807)) (key 1176807))
                (<= (key 1176807) (minr (rght 1176807))))))
  (=> (ite (= 1176807 1176808) true a!1) (lemma 1176807 1176847))))))
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1176850) 0)
                (< (key 1176850) 100)
                (lemma (lft 1176850) 1176851)
                (bst (lft 1176850))
                (lemma (rght 1176850) 1176851)
                (bst (rght 1176850))
                (<= (maxr (lft 1176850)) (key 1176850))
                (<= (key 1176850) (minr (rght 1176850))))))
  (=> (ite (= 1176850 1176850) true a!1) (lemma 1176850 1176851))))))
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1184595) 0)
                (< (key 1184595) 100)
                (lemma (lft 1184595) 1184594)
                (bst (lft 1184595))
                (lemma (rght 1184595) 1184594)
                (bst (rght 1184595))
                (<= (maxr (lft 1184595)) (key 1184595))
                (<= (key 1184595) (minr (rght 1184595))))))
  (=> (ite (= 1184595 1176874) true a!1) (lemma 1184595 1184594))))))
(assert (and (=> (= rswitch 0) (let ((a!1 (and (> (key 1184596) 0)
                (< (key 1184596) 100)
                (lemma (lft 1184596) 1184597)
                (bst (lft 1184596))
                (lemma (rght 1184596) 1184597)
                (bst (rght 1184596))
                (<= (maxr (lft 1184596)) (key 1184596))
                (<= (key 1184596) (minr (rght 1184596))))))
  (=> (ite (= 1184596 1184596) true a!1) (lemma 1184596 1184597))))))


;; constraints from false model
(assert (or (and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140960) (lemma 1140960 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140964) (lemma 1140964 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140965) (lemma 1140965 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140967) (lemma 1140967 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140968) (lemma 1140968 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140971) (lemma 1140971 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140972) (lemma 1140972 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140975) (lemma 1140975 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140976) (lemma 1140976 1140957 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140960 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140964 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140965 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140967 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140968 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140971 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140972 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140975 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140976 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 1140957) (lemma 1140957 1140957 ))))
)
))

;; constraints from true models

(check-sat)
(get-model)