(set-logic ALL)
;; combination of true models and false model
(define-fun hbst ((x!0 Int)) (Set Int)
  (ite (and (= x!0 28330)) (as emptyset (Set Int))
  (ite (and (= x!0 105)) (insert 0 (insert 29 (insert 103 (insert 105 (insert 28 (insert 109 (as emptyset (Set Int))))))))
  (ite (and (= x!0 106)) (insert 151 (insert 28329 (insert 106 (insert 188 (insert 110 (as emptyset (Set Int)))))))
  (ite (and (= x!0 29)) (insert 28 (insert 29 (as emptyset (Set Int))))
  (ite (and (= x!0 34)) (insert 32 (insert 33 (insert 34 (insert 35 (insert 105 (insert 31 (as emptyset (Set Int))))))))
  (ite (and (= x!0 103)) (insert 0 (insert 29 (insert 103 (insert 105 (insert 28 (insert 109 (as emptyset (Set Int))))))))
  (ite (and (= x!0 107)) (insert 32 (insert 33 (insert 34 (insert 35 (insert 104 (insert 28329 (insert 105 (insert 106 (insert 107 (insert 110 (insert 151 (insert 188 (insert 31 (as emptyset (Set Int)))))))))))))))
  (ite (and (= x!0 100)) (as emptyset (Set Int))
  (ite (and (= x!0 104)) (insert 151 (insert 104 (insert 28329 (insert 106 (insert 188 (insert 110 (as emptyset (Set Int))))))))
  (ite (and (= x!0 31)) (insert 32 (insert 33 (insert 34 (insert 35 (insert 105 (insert 31 (as emptyset (Set Int))))))))
  (as emptyset (Set Int)))))))))))))

(define-fun rght ((x!0 Int)) Int
  (ite (= x!0 28330) 28330
  (ite (= x!0 105) 29
  (ite (= x!0 106) 120
  (ite (= x!0 29) 95
  (ite (= x!0 34) 87
  (ite (= x!0 103) 63
  (ite (= x!0 107) 31
  (ite (= x!0 100) 100
  (ite (= x!0 104) 100
  (ite (= x!0 31) 34
    100)))))))))))
(define-fun minr ((x!0 Int)) Int
  (ite (= x!0 28330) 100
  (ite (= x!0 105) (- 3)
  (ite (= x!0 106) 1
  (ite (= x!0 29) (- 2)
  (ite (= x!0 34) 98
  (ite (= x!0 103) 98
  (ite (= x!0 107) 1
  (ite (= x!0 100) 100
  (ite (= x!0 104) 1
  (ite (= x!0 31) 97
    1)))))))))))
(define-fun lft ((x!0 Int)) Int
  (ite (= x!0 28330) 28330
  (ite (= x!0 105) 103
  (ite (= x!0 106) 118
  (ite (= x!0 29) 93
  (ite (= x!0 34) 88
  (ite (= x!0 103) 61
  (ite (= x!0 107) 104
  (ite (= x!0 100) 100
  (ite (= x!0 104) 106
  (ite (= x!0 31) 100
    100)))))))))))
(define-fun key ((x!0 Int)) Int
  (ite (= x!0 28330) 0
  (ite (= x!0 105) (- 3)
  (ite (= x!0 106) 1
  (ite (= x!0 29) 0
  (ite (= x!0 34) 99
  (ite (= x!0 103) 98
  (ite (= x!0 107) 34
  (ite (= x!0 100) 35
  (ite (= x!0 104) 2
  (ite (= x!0 31) 97
    0)))))))))))
(define-fun maxr ((x!0 Int)) Int
  (ite (= x!0 28330) (- 1)
  (ite (= x!0 105) 102
  (ite (= x!0 106) 1
  (ite (= x!0 29) 101
  (ite (= x!0 34) 100
  (ite (= x!0 103) 102
  (ite (= x!0 107) 100
  (ite (= x!0 100) (- 1)
  (ite (= x!0 104) 2
  (ite (= x!0 31) 100
    100)))))))))))
(define-fun bst ((x!0 Int)) Bool
  (ite (= x!0 28330) true
  (ite (= x!0 105) false
  (ite (= x!0 106) true
  (ite (= x!0 29) false
  (ite (= x!0 34) true
  (ite (= x!0 103) false
  (ite (= x!0 107) true
  (ite (= x!0 100) true
  (ite (= x!0 104) true
  (ite (= x!0 31) true
    true)))))))))))

;; lemma to synthesize
;; TODO: must be generated from problem parameters
(synth-fun lemma ((x Int) (y Int)) Bool
           ((Start Bool) (B1 Bool) (S (Set Int)) (I Int) (Loc Int))

           ((Start Bool (B1
                  (=> B1 B1)))
           (B1 Bool
                  ((<= I I)
                   (member Loc S)))
           (S (Set Int)
                  ((hbst Loc)))
           (I Int (
                  (key Loc)
                  (minr Loc)
                  (maxr Loc)))
           (Loc Int (x y)))
)

(synth-fun rswitch () Int
           ((Start Int))
           ((Start Int (0)))
)

;; pfp constraints from counterexample models
(constraint (and (=> (= rswitch 0) (let ((a!1 (and (> (key 28330) 0)
                (< (key 28330) 100)
                (lemma (lft 28330) 28330)
                (bst (lft 28330))
                (lemma (rght 28330) 28330)
                (bst (rght 28330))
                (<= (maxr (lft 28330)) (key 28330))
                (<= (key 28330) (minr (rght 28330))))))
  (=> (ite (= 28330 28330) true a!1) (lemma 28330 28330))))))


;; constraints from false model
(constraint (or (and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 34) (lemma 34 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 100) (lemma 100 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 103) (lemma 103 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 104) (lemma 104 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 105) (lemma 105 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 106) (lemma 106 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 107) (lemma 107 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 29) (lemma 29 31 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 34 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 100 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 103 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 104 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 105 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 106 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 107 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 29 ))))
)
(and (=> (= rswitch 0) (not (=> (bst 31) (lemma 31 31 ))))
)
))

;; constraints from true models

(check-synth)